datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  fullName      String
  email         String    @unique
  passwordHash  String
  lang          String    @default("en")
  salary        Float     @default(0)
  salaryDate    Int       @default(1)
  autoAddSalary Boolean   @default(false)
  salaryAccountId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  expenses      Expense[]
  subscriptions Subscription[]
  receipts      Receipt[]
  sideIncomes   SideIncome[]
  transactions  Transaction[]
  deals         Deal[]
  sessions      Session[]
  dealUpvotes   DealUpvote[]
}

model Account {
  id        String    @id
  userId    String
  bank      String
  type      String
  nickname  String
  balance   Float     @default(0)
  isPrimary Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses  Expense[]
  subscriptions Subscription[]
  receipts  Receipt[]
  transactions Transaction[]
}

model Expense {
  id            String   @id
  userId        String
  accountId     String
  title         String
  amount        Float
  category      String
  date          String
  isRecurring   Boolean  @default(false)
  merchant      String
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Subscription {
  id             String   @id
  userId         String
  accountId      String
  serviceName    String
  amount         Float
  billingCycle   String
  nextBillingDate String
  category       String
  status         String   @default("active")
  autoDeduct     Boolean  @default(true)
  reminderDays   Int      @default(3)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account        Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Receipt {
  id        String   @id
  userId    String
  accountId String
  fileUrl   String
  thumbUrl  String
  merchant  String
  amount    Float
  date      String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Deal {
  id        String      @id
  title     String
  merchant  String
  description String
  category  String
  amount    Float
  discount  Float
  validUntil DateTime
  location  String?
  imageUrl  String?
  creatorId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  upvotes   DealUpvote[]
  creator   User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model DealUpvote {
  id        String   @id @default(cuid())
  userId    String
  dealId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  @@unique([userId, dealId])
}

model SideIncome {
  id          String   @id
  userId      String
  title       String
  amount      Float
  frequency   String
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id
  userId      String
  accountId   String
  type        String   // 'deposit', 'withdrawal', 'transfer'
  amount      Float
  description String?
  category    String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
